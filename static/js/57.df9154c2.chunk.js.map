{"version":3,"file":"static/js/57.df9154c2.chunk.js","mappings":"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","sources":["components/shared/PriceInput.tsx","components/panel/userManamgement/EntryForm.tsx","components/panel/userManamgement/ResetPassword.tsx","components/panel/userManamgement/index.tsx"],"sourcesContent":["import { Form as AntdForm, InputNumber } from \"antd\";\r\nimport util from \"config/utils\";\r\nimport { useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface IPriceInput {\r\n  label?: string;\r\n  name?: string;\r\n  form?: any;\r\n  placeholder?: string;\r\n  min?: number;\r\n  max?: number;\r\n  className?: string;\r\n  notRequired?: boolean;\r\n  unit?: string;\r\n  readOnly?: boolean;\r\n  stringMode?:boolean\r\n}\r\nconst PriceInput = (props: IPriceInput) => {\r\n  const { t } = useTranslation();\r\n  const Form = props.form || AntdForm;\r\n  const rules = useMemo(() => {\r\n    const result: any[] = [];\r\n    if (!props.notRequired)\r\n      result.push({ required: true, message: t(\"required\") ?? \"\" });\r\n    if (typeof props.min !== \"undefined\")\r\n      result.push({\r\n        validator: (rule: any, value: string, callback: any) => {\r\n          if (!value) {\r\n            return Promise.resolve(); // Skip validation if value is empty\r\n          }\r\n          if (parseFloat(value) < props.min!) {\r\n            return Promise.reject(\r\n              new Error(\r\n                t(\"minAmountIsX\", {\r\n                  amount: util.commaThousondSeperator(props.min),\r\n                }) ?? \"\"\r\n              )\r\n            );\r\n          }\r\n          return Promise.resolve();\r\n        },\r\n      });\r\n    if (typeof props.max !== \"undefined\")\r\n      result.push({\r\n        validator: (rule: any, value: string, callback: any) => {\r\n          if (!value) {\r\n            return Promise.resolve(); // Skip validation if value is empty\r\n          }\r\n          if (parseFloat(value) > props.max!) {\r\n            return Promise.reject(\r\n              new Error(\r\n                t(\"maxAmountIsX\", {\r\n                  amount: util.commaThousondSeperator(props.max),\r\n                }) ?? \"\"\r\n              )\r\n            );\r\n          }\r\n          return Promise.resolve();\r\n        },\r\n      });\r\n    return result;\r\n  }, [props.notRequired, props.min, props.max]);\r\n  return (\r\n    <Form.Item\r\n      name={props.name || \"amount\"}\r\n      label={props.label || t(\"amount\")}\r\n      rules={rules}\r\n    >\r\n      <InputNumber\r\n        readOnly={props.readOnly}\r\n        stringMode={props.stringMode}\r\n        formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n        parser={(value) => parseFloat(value!.replace(/\\$\\s?|(,*)/g, \"\"))}\r\n        placeholder={props.placeholder}\r\n        className={`ltr-elm placeholder-r w-100 ${props.className}`}\r\n        controls={false}\r\n        style={{ paddingRight: 11 }}\r\n        prefix={t(\"baseCurrency\") ?? props.unit}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\nexport default PriceInput;\r\n","import { Form as AntForm, Checkbox, Col, Input, Row, Select } from \"antd\";\r\nimport PriceInput from \"components/shared/PriceInput\";\r\nimport addreses from \"config/api/addresses\";\r\nimport patterns from \"config/patterns\";\r\nimport useApi from \"hooks/useApi\";\r\nimport { TOrganizationLevelSummary } from \"models/organizationLevel\";\r\nimport { TRole } from \"models/user\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AddressInput from \"../shared/AddressInputs\";\r\ninterface IEntryForm {\r\n  data: any;\r\n  form: any;\r\n}\r\nconst EntryForm = ({ data, form: entryFrm }: IEntryForm) => {\r\n  const { t } = useTranslation();\r\n  const [, gettingRoles, roles] = useApi<TRole[]>({\r\n    autoCallUrl: addreses.userManager.roles,\r\n    cachingLifeTimeInSeconds: 60,\r\n  });\r\n  const [, gettingLevels, levels] = useApi<TOrganizationLevelSummary, any[]>({\r\n    autoCallUrl: addreses.organizationLevel.tree,\r\n    cachingLifeTimeInSeconds: 60,\r\n    mapper: (data) => {\r\n      const result: any[] = [];\r\n      const iterator = (item: TOrganizationLevelSummary) => {\r\n        if (item.nodes && item.nodes.length) {\r\n          item.nodes.forEach((i) =>\r\n            iterator({\r\n              ...i,\r\n              name: `${item.name}/${i.name}`,\r\n            })\r\n          );\r\n        } else {\r\n          result.push(item);\r\n        }\r\n      };\r\n      if (data) iterator(data);\r\n      return result;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <AntForm.Item noStyle name=\"id\">\r\n        <Input type=\"hidden\" />\r\n      </AntForm.Item>\r\n      <Row gutter={16}>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"firstName\"\r\n            label={t(\"firstName\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder={t(\"firstName\") ?? \"\"} />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"lastName\"\r\n            label={t(\"lastName\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder={t(\"lastName\") ?? \"\"} />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"nationalCode\"\r\n            label={t(\"nationalCode\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n              {\r\n                pattern: patterns.nationalCode,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              readOnly={!!data}\r\n              placeholder={t(\"nationalCode\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item valuePropName=\"checked\" name=\"isEnabled\" label={\" \"}>\r\n            <Checkbox>{t(\"isEnabled\")}</Checkbox>\r\n          </AntForm.Item>\r\n        </Col>\r\n        {!data && (\r\n          <>\r\n            <Col xs={12} sm={8} md={6}>\r\n              <AntForm.Item\r\n                name=\"password\"\r\n                label={t(\"password\")}\r\n                rules={[\r\n                  { required: true, message: t(\"required\") ?? \"\" },\r\n                  { min: 8, message: t(\"atleastXChar\", { x: 8 }) ?? \"\" },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  placeholder={t(\"password\") ?? \"\"}\r\n                  className=\"ltr-elm placeholder-r\"\r\n                />\r\n              </AntForm.Item>\r\n            </Col>\r\n            <Col xs={12} sm={8} md={6}>\r\n              <AntForm.Item\r\n                name=\"passwordConfirm\"\r\n                label={t(\"confirmPassword\")}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: t(\"required\") ?? \"\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\r\n                        new Error(t(\"passwordsMissMatch\") ?? \"\")\r\n                      );\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  placeholder={t(\"confirmPassword\") ?? \"\"}\r\n                  className=\"ltr-elm  placeholder-r\"\r\n                />\r\n              </AntForm.Item>\r\n            </Col>\r\n          </>\r\n        )}\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"personnelId\"\r\n            label={t(\"personnelId\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n              {\r\n                pattern: patterns.personelId,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              placeholder={t(\"personnelId\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"phoneNumber\"\r\n            label={t(\"mobileNumber\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n              {\r\n                pattern: patterns.mobile,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              placeholder={t(\"mobileNumber\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <PriceInput\r\n            stringMode={false}\r\n            name=\"baseSalary\"\r\n            label={t(\"baseSalary\") ?? \"\"}\r\n            placeholder={t(\"baseSalary\") ?? \"\"}\r\n          />\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"emailAddress\"\r\n            label={t(\"email\")}\r\n            rules={[\r\n              {\r\n                pattern: patterns.email,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              placeholder={t(\"email\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={24} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"organizationLevelId\"\r\n            label={t(\"organizationLevel\")}\r\n          >\r\n            <Select\r\n              allowClear\r\n              placeholder={t(\"organizationLevel\")}\r\n              options={(levels as any[])?.map((l) => ({\r\n                label: l.name,\r\n                value: l.id,\r\n              }))}\r\n              loading={gettingLevels}\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item name=\"roleIds\" label={t(\"roles\")}>\r\n            <Select\r\n              mode=\"multiple\"\r\n              loading={gettingRoles}\r\n              //size={\"large\"}\r\n              placeholder={t(\"roles\")}\r\n              defaultValue={[]}\r\n              showArrow\r\n              //onChange={handleChange}\r\n              style={{ width: \"100%\" }}\r\n              options={roles?.map((r) => ({\r\n                label: r.name,\r\n                value: r.id,\r\n              }))}\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <AddressInput data={data} entryFrm={entryFrm} />\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default EntryForm;\r\n","import { Col, Form, Input, Modal, Row } from \"antd\";\r\nimport addreses from \"config/api/addresses\";\r\nimport useApi from \"hooks/useApi\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface IResetPassword {\r\n  onClose: () => void;\r\n  data: any;\r\n}\r\nconst ResetPassword = (props: IResetPassword) => {\r\n  const [reset, resetting] = useApi<any>({\r\n    onSuccess: () => {\r\n      props.onClose();\r\n    },\r\n  });\r\n  const handleSubmit = (values: any) => {\r\n    reset.post(addreses.userManager.resetPassword, values);\r\n  };\r\n  const handleFailed = () => {};\r\n  const { t } = useTranslation();\r\n  const [frm] = Form.useForm();\r\n  const onOk = () => {\r\n    frm.submit();\r\n  };\r\n  return (\r\n    <Modal\r\n      title={t(\"resetPassword\")}\r\n      open={true}\r\n      onCancel={props.onClose}\r\n      onOk={onOk}\r\n      okButtonProps={{\r\n        loading: resetting,\r\n      }}\r\n    >\r\n      <Form\r\n        key=\"reset-password-form\"\r\n        layout=\"vertical\"\r\n        onFinish={handleSubmit}\r\n        onFinishFailed={handleFailed}\r\n        autoComplete=\"off\"\r\n        form={frm}\r\n        initialValues={props.data}\r\n      >\r\n        <Form.Item noStyle name=\"id\">\r\n          <Input type=\"hidden\" />\r\n        </Form.Item>\r\n        <Row gutter={16}>\r\n          <Col xs={24} sm={24}>\r\n            <Form.Item\r\n              name=\"newPassword\"\r\n              label={t(\"newPassword\")}\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: t(\"required\") ?? \"\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password placeholder={t(\"newPassword\") ?? \"\"} />\r\n            </Form.Item>\r\n          </Col>\r\n          <Col xs={24} sm={24}>\r\n            <Form.Item\r\n              name=\"passwordConfirm\"\r\n              label={t(\"repeatPassword\")}\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: t(\"required\") ?? \"\",\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (getFieldValue(\"newPassword\") === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\r\n                      new Error(t(\"passwordsMissMatch\") ?? \"\")\r\n                    );\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password placeholder={t(\"repeatPassword\") ?? \"\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nexport default ResetPassword;\r\n","import { Button, Col, Form, Input, Row } from \"antd\";\r\nimport AdminPage from \"components/panel/shared/AdminPage\";\r\nimport ConfirmModal from \"components/panel/shared/ConfirmModal\";\r\nimport CustomIcon from \"components/shared/CustomIcon\";\r\nimport addreses from \"config/api/addresses\";\r\nimport useApi from \"hooks/useApi\";\r\nimport { PagedData, PagedListUpdater } from \"models\";\r\nimport { TUserSummary } from \"models/user\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport NumberCell from \"../shared/cells/NumberCell\";\r\nimport EntryForm from \"./EntryForm\";\r\nimport ResetPassword from \"./ResetPassword\";\r\n\r\nconst User = () => {\r\n  const { t } = useTranslation();\r\n  const [userToChange, selectUser] = useState<{\r\n    user: TUserSummary;\r\n    updater: PagedListUpdater<TUserSummary>;\r\n  } | null>(null);\r\n  const [userToResetPW, selectUserToResetPW] = useState<TUserSummary | null>(\r\n    null\r\n  );\r\n  const [changeStatus, changing] = useApi({\r\n    onSuccess: (_, params) => {\r\n      userToChange?.updater(\r\n        (s) =>\r\n          ({\r\n            ...s,\r\n            results: [\r\n              ...(s?.results.map((x) =>\r\n                x.id !== userToChange.user.id\r\n                  ? x\r\n                  : {\r\n                      ...x,\r\n                      isEnabled: !userToChange.user.isEnabled,\r\n                    }\r\n              ) ?? []),\r\n            ],\r\n          } as PagedData<TUserSummary>)\r\n      );\r\n      selectUser(null);\r\n    },\r\n  });\r\n  const handleChangeStatus = () => {\r\n    changeStatus.post(\r\n      addreses.userManager.changeStatus(\r\n        userToChange!.user.id,\r\n        !userToChange!.user.isEnabled\r\n      )\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <AdminPage<TUserSummary>\r\n        title={t(\"usersManagement\")}\r\n        id=\"user\"\r\n        idProp=\"id\"\r\n        EntryForm={EntryForm}\r\n        filterUrl={addreses.userManager.list}\r\n        findUrl={(record) => addreses.userManager.find(record.id)}\r\n        columns={[\r\n          {\r\n            title: t(\"fullName\"),\r\n            dataIndex: \"fullName\",\r\n            key: \"fullName\",\r\n            fixed: \"left\",\r\n            render: function (text, record, index) {\r\n              return <span>{`${record.firstName} ${record.lastName}`}</span>;\r\n            },\r\n          },\r\n          {\r\n            title: t(\"nationalCode\"),\r\n            dataIndex: \"nationalCode\",\r\n            key: \"nationalCode\",\r\n          },\r\n          {\r\n            title: t(\"email\"),\r\n            dataIndex: \"emailAddress\",\r\n            key: \"emailAddress\",\r\n            width: 220,\r\n            render: function (text, record, index) {\r\n              return <a href={`mailto:${text}`}>{text}</a>;\r\n            },\r\n          },\r\n          {\r\n            title: t(\"baseSalary\"),\r\n            dataIndex: \"baseSalary\",\r\n            key: \"baseSalary\",\r\n            render: (text) => <NumberCell value={text} />,\r\n          },\r\n          {\r\n            title: t(\"organizationLevel\"),\r\n            dataIndex: \"organizationLevelName\",\r\n            key: \"organizationLevelName\",\r\n            width: 200,\r\n            render: (text) => <span>{text}</span>,\r\n          },\r\n          {\r\n            title: t(\"enabled\"),\r\n            dataIndex: \"enabled\",\r\n            key: \"enabled\",\r\n            width: 100,\r\n            render: function (text, record, index) {\r\n              return record.isEnabled ? t(\"yes\") : t(\"no\");\r\n            },\r\n          },\r\n        ]}\r\n        scrollX={1100}\r\n        deleteAction={{\r\n          url: (record) => addreses.userManager.delete(record.id),\r\n        }}\r\n        addUrl={addreses.userManager.add}\r\n        editAction={{\r\n          url: addreses.userManager.update,\r\n        }}\r\n        customActions={[\r\n          {\r\n            renderer: (text, record, updater, isMobile) => {\r\n              return (\r\n                <Button\r\n                  danger={isMobile ? undefined : record.isEnabled}\r\n                  type={isMobile ? \"ghost\" : \"primary\"}\r\n                  shape={isMobile ? \"default\" : \"circle\"}\r\n                  title={\r\n                    (record.isEnabled ? t(\"deactive\") : t(\"activate\")) ?? \"\"\r\n                  }\r\n                  icon={\r\n                    isMobile ? undefined : (\r\n                      <CustomIcon\r\n                        name={\r\n                          !record.isEnabled\r\n                            ? \"IoShieldCheckmarkOutline\"\r\n                            : \"IoLockClosedOutline\"\r\n                        }\r\n                      />\r\n                    )\r\n                  }\r\n                  onClick={() =>\r\n                    selectUser({\r\n                      user: record,\r\n                      updater,\r\n                    })\r\n                  }\r\n                >\r\n                  {isMobile\r\n                    ? record.isEnabled\r\n                      ? t(\"deactive\")\r\n                      : t(\"activate\")\r\n                    : null}\r\n                </Button>\r\n              );\r\n            },\r\n          },\r\n          {\r\n            renderer: (text, record, updater, isMobile) => {\r\n              return (\r\n                <Button\r\n                  type={isMobile ? \"ghost\" : \"primary\"}\r\n                  shape={isMobile ? \"default\" : \"circle\"}\r\n                  title={t(\"resetPasswrod\") ?? \"\"}\r\n                  icon={\r\n                    isMobile ? undefined : <CustomIcon name={\"MdLockReset\"} />\r\n                  }\r\n                  onClick={() =>\r\n                    selectUserToResetPW(record)\r\n                  }\r\n                >\r\n                  {isMobile ? t(\"resetPassword\") : null}\r\n                </Button>\r\n              );\r\n            },\r\n          },\r\n        ]}\r\n        entryModalWidth={1000}\r\n      >\r\n        <Row gutter={[20, 20]}>\r\n          <Col xs={24} sm={12}>\r\n            <Form.Item name=\"filter\" rules={[]}>\r\n              <Input placeholder={t(\"search\") ?? \"\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n      </AdminPage>\r\n      <ConfirmModal\r\n        open={!!userToChange}\r\n        loading={changing}\r\n        onOk={handleChangeStatus}\r\n        title={t(\"userAccount\") ?? \"\"}\r\n        message={\r\n          (userToChange?.user.isEnabled\r\n            ? t(\"areYouSureToDeactive\")\r\n            : t(\"areYouSureToActivate\")) ?? \"\"\r\n        }\r\n        onCancel={() => selectUser(null)}\r\n      />\r\n      {userToResetPW && (\r\n        <ResetPassword\r\n          onClose={() => selectUserToResetPW(null)}\r\n          data={userToResetPW}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default User;\r\n"],"names":["props","t","useTranslation","Form","form","AntdForm","rules","useMemo","result","notRequired","push","required","message","min","validator","rule","value","callback","parseFloat","Promise","reject","Error","amount","util","resolve","max","Item","name","label","readOnly","stringMode","formatter","replace","parser","placeholder","className","controls","style","paddingRight","prefix","unit","data","entryFrm","useApi","autoCallUrl","addreses","cachingLifeTimeInSeconds","gettingRoles","roles","mapper","iterator","item","nodes","length","forEach","i","gettingLevels","levels","noStyle","type","gutter","xs","sm","md","pattern","patterns","valuePropName","x","getFieldValue","_","allowClear","options","map","l","id","loading","mode","defaultValue","showArrow","width","r","onSuccess","onClose","reset","resetting","frm","title","open","onCancel","onOk","submit","okButtonProps","layout","onFinish","values","post","onFinishFailed","autoComplete","initialValues","useState","userToChange","selectUser","userToResetPW","selectUserToResetPW","params","updater","s","results","user","isEnabled","changeStatus","changing","AdminPage","idProp","EntryForm","filterUrl","findUrl","record","columns","dataIndex","key","fixed","render","text","index","firstName","lastName","href","NumberCell","scrollX","deleteAction","url","addUrl","editAction","customActions","renderer","isMobile","danger","undefined","shape","icon","CustomIcon","onClick","entryModalWidth","ConfirmModal"],"sourceRoot":""}