{"version":3,"file":"static/js/198.472ee51f.chunk.js","mappings":"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","sources":["components/Splash.tsx","components/panel/shared/Header.tsx","components/panel/shared/Menu.tsx","components/panel/index.tsx","models/index.ts"],"sourcesContent":["import { Spin } from \"antd\";\r\nimport { navigateTo } from \"config/routes\";\r\nimport storageKeys from \"config/storageKeys\";\r\nimport utils from \"config/utils\";\r\nimport SharedContext from \"context/SharedContext\";\r\nimport { MenuTypes, TUser } from \"models\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Splash = ({ doNothing = true }: { doNothing?: boolean }) => {\r\n  const { t } = useTranslation();\r\n  const nav = useNavigate();\r\n  const { setToken,setUser,setMenues } = useContext(SharedContext);\r\n  // const [refreshUser] = useApi<TUser>({\r\n  //   onFailed: () => {\r\n  //     util.clearStorage();\r\n  //     nav(navigateTo.login);\r\n  //   }\r\n  // });\r\n  useEffect(() => {\r\n    if (!doNothing) {\r\n      const user = utils.getStoredData(storageKeys.user);\r\n      const menues = utils.getStoredData(storageKeys.menus);\r\n      const token = utils.getStoredData(storageKeys.token);\r\n      //const refToken = utils.getStoredData(storageKeys.refreshToken);\r\n      if (user && menues && token){\r\n        setMenues(menues as MenuTypes[]);\r\n        setToken(token as string);\r\n        setUser(user as TUser);\r\n      } \r\n      else {\r\n        utils.clearStorage();\r\n        window.open(navigateTo.login);\r\n      }\r\n    }\r\n  }, []);\r\n  return (\r\n    <div id=\"splash\">\r\n      <h1>{t(\"loading\")}</h1>\r\n      <Spin />\r\n    </div>\r\n  );\r\n};\r\nexport default Splash;\r\n","import { Layout as AntLayout, Button } from \"antd\";\r\nimport routes from \"config/routes\";\r\nimport SharedContext from \"context/SharedContext\";\r\nimport { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CustomIcon from \"../../shared/CustomIcon\";\r\nconst Header = () => {\r\n  const {title, theme,setTheme,toggleDrawer} = useContext(SharedContext);\r\n  const handleTheme = () => {\r\n    setTheme(theme===\"dark\"?\"light\":\"dark\")\r\n  };\r\n  return (\r\n    <AntLayout.Header id=\"header\">\r\n      <div className=\"breadcrumb\">\r\n        <Button type=\"link\" id=\"btn-toggle-menu\" onClick={() => toggleDrawer(true)}>\r\n          <CustomIcon size={20} name=\"IoReorderFourOutline\" />\r\n        </Button>\r\n        <strong>{title}</strong>\r\n      </div>\r\n      <div className=\"actions\">\r\n        {/* <Link className={`center a-notif`} to={`/${routes.notifications}`}>\r\n          <CustomIcon name=\"IoNotificationsOutline\" size={16} />\r\n        </Link>\r\n        <span className=\"divider\"></span> */}\r\n        <Button onClick={handleTheme} type=\"link\">\r\n          <CustomIcon name=\"IoMoonOutline\" size={16} />\r\n        </Button>\r\n      </div>\r\n    </AntLayout.Header>\r\n  );\r\n};\r\nexport default Header;\r\n","import { Menu as AntMenu, Avatar, Button } from \"antd\";\r\nimport logoImage from \"assets/files/logo.png\";\r\nimport CustomIcon from \"components/shared/CustomIcon\";\r\nimport routes, { navigateTo } from \"config/routes\";\r\nimport SharedContext from \"context/SharedContext\";\r\nimport { MenuTypes, TMenu } from \"models\";\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nconst Menu = () => {\r\n  const { menues, user, logout, toggleDrawer } = useContext(SharedContext);\r\n  const [actionsIsOpen, toggleActions] = useState(false);\r\n  const mapper = useCallback(\r\n    (x: any) => ({\r\n      key: x.menuId,\r\n      label: x.name,\r\n      itemIcon: x.icon,\r\n      children: x.children?.map(mapper),\r\n      title: x.name,\r\n    }),\r\n    []\r\n  );\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const [state, setState] = useState({\r\n    openKeys: [routes.dashboard.toString()],\r\n    selectedKey: \"none\",\r\n  });\r\n  const menuItems = useMemo(\r\n    () =>\r\n      menues.map((m) => {\r\n        switch (m) {\r\n          case MenuTypes.OrganizationLevelManager:\r\n            return {\r\n              key: \"organization-level-management\",\r\n              label: t(\"organizationLevelManagement\"),\r\n              title: t(\"organizationLevelManagement\"),\r\n              icon: (\r\n                <CustomIcon size={20} color={\"var(--bg)\"} name=\"BsUiChecks\" />\r\n              ),\r\n              path: navigateTo.organizationLevelManagement,\r\n            } as TMenu;\r\n          case MenuTypes.RoleManager:\r\n            return {\r\n              key: \"role-management\",\r\n              label: t(\"roleManagement\"),\r\n              title: t(\"roleManagement\"),\r\n              icon: (\r\n                <CustomIcon\r\n                  size={20}\r\n                  color={\"var(--bg)\"}\r\n                  name=\"BsPersonCheck\"\r\n                />\r\n              ),\r\n              path: navigateTo.roleManagement,\r\n            } as TMenu;\r\n          case MenuTypes.SettingManager:\r\n            return {\r\n              key: \"setting-management\",\r\n              label: t(\"settingManagement\"),\r\n              title: t(\"settingManagement\"),\r\n              icon: (\r\n                <CustomIcon\r\n                  size={20}\r\n                  color={\"var(--bg)\"}\r\n                  name=\"IoSettingsOutline\"\r\n                />\r\n              ),\r\n              path: navigateTo.settingManagement,\r\n            } as TMenu;\r\n          case MenuTypes.UserManager:\r\n            return {\r\n              key: \"user-management\",\r\n              label: t(\"userManagement\"),\r\n              title: t(\"userManagement\"),\r\n              icon: (\r\n                <CustomIcon\r\n                  size={20}\r\n                  color={\"var(--bg)\"}\r\n                  name=\"IoPeopleOutline\"\r\n                />\r\n              ),\r\n              path: navigateTo.userManagement,\r\n            } as TMenu;\r\n            case MenuTypes.DeveloperSupport:\r\n            return {\r\n              key: \"dev-support\",\r\n              label: t(\"developerSupport\"),\r\n              title: t(\"developerSupport\"),\r\n              icon: (\r\n                <CustomIcon\r\n                  size={20}\r\n                  color={\"var(--bg)\"}\r\n                  name=\"FaCode\"\r\n                />\r\n              ),\r\n              path: navigateTo.userManagement,\r\n            } as TMenu;\r\n          case MenuTypes.SurfaceWaterPermitManager:\r\n            return {\r\n              key: \"surface-water\",\r\n              label: t(\"surfaceWater\"),\r\n              path: navigateTo.surfaceWaterLicenseManagement,\r\n              icon: (\r\n                <CustomIcon\r\n                  size={20}\r\n                  color={\"var(--bg)\"}\r\n                  name=\"MdOutlineWater\"\r\n                />\r\n              ),\r\n            };\r\n          case MenuTypes.PondPermitManager:\r\n            return {\r\n              key: \"pond-water\",\r\n              label: t(\"pondWater\"),\r\n              path: navigateTo.pondWaterLicenseManagement,\r\n              icon: (\r\n                <CustomIcon size={20} color={\"var(--bg)\"} name=\"MdVignette\" />\r\n              ),\r\n            };\r\n          case MenuTypes.SpringPermitManager:\r\n            return {\r\n              key: \"spring-water\",\r\n              label: t(\"springWater\"),\r\n              path: navigateTo.springWaterLicenseManagement,\r\n              icon: (\r\n                <CustomIcon\r\n                  size={20}\r\n                  color={\"var(--bg)\"}\r\n                  name=\"IoWaterOutline\"\r\n                />\r\n              ),\r\n            };\r\n          case MenuTypes.WellPermitManager:\r\n            return {\r\n              key: \"well-water\",\r\n              label: t(\"wellWater\"),\r\n              path: navigateTo.wellWaterLicenseManagement,\r\n              icon: (\r\n                <CustomIcon size={20} color={\"var(--bg)\"} name=\"FaRegCircle\" />\r\n              ),\r\n            };\r\n          default:\r\n            return {\r\n              key: m,\r\n              label: t(m),\r\n              title: t(m),\r\n              icon: (\r\n                <CustomIcon size={20} color={\"var(--bg)\"} name=\"IoHelpSharp\" />\r\n              ),\r\n              path: `/${m}`,\r\n            };\r\n        }\r\n      }),\r\n    []\r\n  );\r\n  const navigateToRoute = (e: any) => {\r\n    let k = e.key;\r\n    let item: TMenu | undefined = undefined;\r\n    for (let m of menuItems ?? []) {\r\n      if (!(m as any).children) item = m.key === k ? m : undefined;\r\n      else item = (m as any).children?.find((x: any) => x.key === k);\r\n      if (item) {\r\n        navigate(item?.path ?? \"/\");\r\n        toggleDrawer(false);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  const location = useLocation();\r\n  const setCurrentMenu = useCallback(() => {\r\n    let pathname = window.location.pathname;\r\n    let openKeys: string[] = [];\r\n    let selectedKey: string = \"none\";\r\n    for (let x of menuItems ?? []) {\r\n      const i = x as any;\r\n      if (!i.children) {\r\n        if (~pathname.indexOf(i.path ?? \"\")) {\r\n          selectedKey = i.key!;\r\n          break;\r\n        }\r\n      } else {\r\n        let m = i.children?.find((x: any) => ~pathname.indexOf(x.path ?? \"\"));\r\n        if (m) {\r\n          selectedKey = m.key!;\r\n          openKeys = [i.key!];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    console.log(\"selected\", selectedKey);\r\n    setState({\r\n      openKeys,\r\n      selectedKey,\r\n    });\r\n  }, []);\r\n  const onOpenChange = (openKeys: string[]) => {\r\n    setState((s) => ({ ...s, openKeys }));\r\n  };\r\n  useEffect(() => {\r\n    setCurrentMenu();\r\n  }, [location]);\r\n  return (\r\n    <div id=\"menu\">\r\n      <Link to=\"/\" className=\"logo\">\r\n        <img src={logoImage} alt=\"logo\" width={50} />\r\n        <strong>{t(\"appName\")}</strong>\r\n      </Link>\r\n      <AntMenu\r\n        onClick={navigateToRoute}\r\n        onOpenChange={onOpenChange}\r\n        style={{ width: 256 }}\r\n        selectedKeys={[state.selectedKey]}\r\n        openKeys={state.openKeys}\r\n        mode=\"inline\"\r\n        items={menuItems}\r\n      />\r\n      <div className=\"profile\">\r\n        <div className=\"content\">\r\n          <div\r\n            className=\"user\"\r\n            role=\"button\"\r\n            onClick={() => toggleActions((s) => !s)}\r\n          >\r\n            <Avatar size={45}>{user?.fullName[0].toUpperCase()}</Avatar>\r\n\r\n            <div className=\"info\">\r\n              <span className=\"name\" title={user?.fullName}>\r\n                {user?.fullName}\r\n              </span>\r\n              <span className=\"email\" title={user?.nationalCode}>\r\n                {user?.nationalCode}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <Button className=\"btn-toggle\" type=\"link\">\r\n            {\r\n              <CustomIcon\r\n                name={actionsIsOpen ? \"IoChevronDown\" : \"IoChevronUp\"}\r\n              />\r\n            }\r\n          </Button>\r\n        </div>\r\n        {actionsIsOpen && (\r\n          <ul className=\"actions\">\r\n            <li role=\"button\" onClick={() => navigate(navigateTo.profile)}>\r\n              <CustomIcon size={18} name=\"IoPersonOutline\" />\r\n              <span>{t(\"profile\")}</span>\r\n            </li>\r\n            {/* <li role=\"button\" onClick={() => navigate(navigateTo.changePassword)}><CustomIcon size={18} name=\"IoKeyOutline\" /><span>{t(\"changePassword\")}</span></li> */}\r\n            <li role=\"button\" onClick={logout}>\r\n              <CustomIcon size={18} name=\"IoPowerOutline\" />\r\n              <span>{t(\"logOut\")} </span>\r\n            </li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Menu;\r\n","import { Layout as AntLayout, Drawer } from \"antd\";\r\nimport LayoutHeader from \"components/panel/shared/Header\";\r\nimport Splash from \"components/Splash\";\r\nimport config from \"config\";\r\nimport { navigateTo } from \"config/routes\";\r\nimport storageKeys from \"config/storageKeys\";\r\nimport util from \"config/utils\";\r\nimport SharedContext from \"context/SharedContext\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\nimport Menu from \"./shared/Menu\";\r\n\r\nconst { Sider, Content } = AntLayout;\r\nconst Panel = () => {\r\n  let token = util.getStoredData(storageKeys.token);\r\n  const { user, isDrawerOpen, toggleDrawer } = useContext(SharedContext);\r\n  // const user = useRecoilValue(AtomUser);\r\n  //const { lightMode } = useSelector((x) => x.theme);\r\n  const location = useLocation();\r\n  const { t, i18n } = useTranslation();\r\n  const width = window.outerWidth;\r\n\r\n  if (user)\r\n    return (\r\n      <AntLayout id=\"panel\" hasSider={true}>\r\n        <Drawer\r\n          placement={i18n.dir() === \"rtl\" ? \"right\" : \"left\"}\r\n          onClose={() => toggleDrawer(false)}\r\n          open={isDrawerOpen}\r\n          className=\"drawer\"\r\n        >\r\n          <Menu />\r\n        </Drawer>\r\n        {width > config.breakpoints.xs && (\r\n          <Sider width={width > 1400 ? 257 : 220}>\r\n            <Menu />\r\n          </Sider>\r\n        )}\r\n        <AntLayout>\r\n          <LayoutHeader />\r\n          <Content>\r\n            <Outlet />\r\n          </Content>\r\n        </AntLayout>\r\n      </AntLayout>\r\n    );\r\n  else if (token) {\r\n    return <Splash doNothing={false} />;\r\n  } else\r\n    return (\r\n      <Navigate to={navigateTo.login} state={{ from: location }} replace />\r\n    );\r\n};\r\nexport default Panel;\r\n","import type { ItemType } from \"antd/es/menu/hooks/useItems\";\r\nimport { Dispatch, SetStateAction } from \"react\";\r\nexport type TResponse<T> = {\r\n  succeeded: boolean;\r\n  messages: any[];\r\n  result: T;\r\n  exception: number;\r\n};\r\nexport type TUser = {\r\n  fullName: string;\r\n  nationalCode: string;\r\n  phoneNumber: string;\r\n  personnelId?: string;\r\n  baseSalary?: string;\r\n  emailAddress?: string;\r\n  countyId?: number;\r\n  districtId?: number;\r\n  cityId?: number;\r\n  ruralDistrictId?: number;\r\n  villageId?: number;\r\n};\r\nexport enum MenuTypes {\r\n  //[Display(Name = \"مدیریت تنظیمات\")]\r\n  SettingManager = \"SettingManager\",\r\n  //[Display(Name = \"مدیریت کاربران\")]\r\n  UserManager = \"UserManager\",\r\n  //[Display(Name = \"مدیریت نقش‌ها\")]\r\n  RoleManager = \"RoleManager\",\r\n  //[Display(Name = \"مدیریت سطح سازمانی\")]\r\n  OrganizationLevelManager = \"OrganizationLevelManager\",\r\n  //[Display(Name = \"مدیریت مجوز بهره برداری\")]\r\n  PondPermitManager = \"PondPermitManager\",\r\n  SurfaceWaterPermitManager = \"SurfaceWaterPermitManager\",\r\n  SpringPermitManager = \"SpringPermitManager\",\r\n  WellPermitManager = \"WellPermitManager\",\r\n  DeveloperSupport = \"DeveloperSupport\",\r\n}\r\nexport type TMenu = ItemType & {\r\n  path?: string;\r\n};\r\nexport type TTheme = \"dark\" | \"light\";\r\nexport type TSharedContext = {\r\n  theme: TTheme;\r\n  title: string;\r\n  defaultPath: string;\r\n  user: TUser | null;\r\n  accessToken: string;\r\n  refreshToken?: string;\r\n  menues: MenuTypes[];\r\n  isDrawerOpen: boolean;\r\n  setTitle: (title: string) => void;\r\n  setTheme: (thm: TTheme) => void;\r\n  setMenues: (menues: MenuTypes[]) => void;\r\n  setUser: (user: TUser) => void;\r\n  setToken: (token: string, refreshToken?: string) => void;\r\n  logout: () => void;\r\n  toggleDrawer: (isOpen: boolean) => void;\r\n};\r\nexport type PagedData<T> = {\r\n  results: T[];\r\n  page: number;\r\n  pageSize: number;\r\n  totalPagesCount: number;\r\n  totalEntitiesCount: number;\r\n};\r\nexport type TooltipItem = {\r\n  value?: string | number | null;\r\n  name?: string;\r\n  color?: string;\r\n  colorForValue?: boolean;\r\n  divider?: boolean;\r\n  redGreenMode?: boolean;\r\n  formatValue?: boolean;\r\n  dir?: \"rtl\" | \"ltr\";\r\n  prefix?: string;\r\n  suffix?: string;\r\n};\r\nexport type PagedListUpdater<T> = Dispatch<SetStateAction<PagedData<T> | null>>;\r\nexport type Updater<T> = Dispatch<SetStateAction<PagedData<T> | T[] | null>>;\r\nexport type Dictionary = { [key: string]: string };\r\nexport type TLocation = {\r\n  id: number;\r\n  name: string;\r\n};\r\nexport enum PersianMonthesEnum {\r\n  farvardin = \"0\",\r\n  ordibehesht = \"1\",\r\n  khordad = \"2\",\r\n  tir = \"3\",\r\n  mordad = \"4\",\r\n  shahrivar = \"5\",\r\n  mehr = \"6\",\r\n  aban = \"7\",\r\n  azar = \"8\",\r\n  dey = \"9\",\r\n  bahman = \"10\",\r\n  esfand = \"11\",\r\n}\r\nexport interface ICustomDatePickerProps {\r\n  onChange?: (date: string | null) => void;\r\n  value?: string;\r\n  placeholder?: string;\r\n  popupTargetId?: string;\r\n  disabled?: boolean;\r\n  className?: string;\r\n  hasError?: boolean;\r\n  onRemove?: () => void;\r\n  endTime?: boolean;\r\n  readOnly?: boolean;\r\n}\r\nexport interface IStepContent {\r\n  entryFrm: any;\r\n  readOnly?: boolean;\r\n  data: any;\r\n  initialValues: any;\r\n}\r\n"],"names":["doNothing","t","useTranslation","useNavigate","useContext","SharedContext","setToken","setUser","setMenues","useEffect","user","utils","storageKeys","menues","token","window","open","navigateTo","id","title","theme","setTheme","toggleDrawer","className","type","onClick","CustomIcon","size","name","logout","useState","actionsIsOpen","toggleActions","mapper","useCallback","x","key","menuId","label","itemIcon","icon","children","map","navigate","openKeys","routes","selectedKey","state","setState","menuItems","useMemo","m","MenuTypes","color","path","location","useLocation","setCurrentMenu","pathname","i","find","indexOf","console","log","to","src","alt","width","e","k","item","undefined","onOpenChange","s","style","selectedKeys","mode","items","role","fullName","toUpperCase","nationalCode","Sider","AntLayout","Content","util","isDrawerOpen","i18n","outerWidth","hasSider","placement","dir","onClose","config","Splash","from","replace","PersianMonthesEnum"],"sourceRoot":""}