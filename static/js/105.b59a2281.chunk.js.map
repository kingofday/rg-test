{"version":3,"file":"static/js/105.b59a2281.chunk.js","mappings":"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","sources":["components/panel/shared/AddressInputs.tsx","components/panel/shared/cells/NumberCell.tsx","components/shared/PriceInput.tsx","components/panel/userManamgement/EntryForm.tsx","components/panel/userManamgement/index.tsx","config/patterns.ts","hooks/useLocation.ts"],"sourcesContent":["import { Form as AntForm, Col, Select } from \"antd\";\r\nimport useLocation from \"hooks/useLocation\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface IAddressInputProps {\r\n  entryFrm: any;\r\n  namePrefix?: string;\r\n  data: any;\r\n  readOnly?:boolean\r\n}\r\nconst AddressInput = ({ entryFrm, data, namePrefix, readOnly }: IAddressInputProps) => {\r\n  const { t } = useTranslation();\r\n  const {\r\n    loadingCounties,\r\n    counties,\r\n    onCountyChanged,\r\n    loadingDistricts,\r\n    districts,\r\n    onDistrictChanged,\r\n    loadingCities,\r\n    cities,\r\n    loadingRuralDistricts,\r\n    ruralDistricts,\r\n    onRuralDistrictsChanged,\r\n    loadingVillages,\r\n    villages,\r\n  } = useLocation({\r\n    entryFrm,\r\n    location: data,\r\n    namePrefix\r\n  });\r\n  return (\r\n    <>\r\n      <Col xs={12} sm={8} md={6}>\r\n        <AntForm.Item\r\n          name={namePrefix ? [namePrefix, \"countyId\"] : \"countyId\"}\r\n          label={t(\"county\")}\r\n        >\r\n          <Select\r\n            allowClear\r\n            showSearch\r\n            placeholder={t(\"county\")}\r\n            loading={loadingCounties}\r\n            onChange={onCountyChanged}\r\n            disabled={readOnly}\r\n            options={[\r\n              {\r\n                label: t(\"selcet\"),\r\n                value: \"\",\r\n              },\r\n              ...(counties?.map((x) => ({\r\n                label: x.name,\r\n                value: x.id,\r\n              })) ?? []),\r\n            ]}\r\n          />\r\n        </AntForm.Item>\r\n      </Col>\r\n      <Col xs={12} sm={8} md={6}>\r\n        <AntForm.Item\r\n          name={namePrefix ? [namePrefix, \"districtId\"] : \"districtId\"}\r\n          label={t(\"district\")}\r\n        >\r\n          <Select\r\n            allowClear\r\n            showSearch\r\n            placeholder={t(\"district\")}\r\n            loading={loadingDistricts}\r\n            onChange={onDistrictChanged}\r\n            disabled={readOnly}\r\n            options={[\r\n              {\r\n                label: t(\"selcet\"),\r\n                value: \"\",\r\n              },\r\n              ...(districts?.map((x) => ({\r\n                label: x.name,\r\n                value: x.id,\r\n              })) ?? []),\r\n            ]}\r\n          />\r\n        </AntForm.Item>\r\n      </Col>\r\n      <Col xs={12} sm={8} md={6}>\r\n        <AntForm.Item\r\n          name={namePrefix ? [namePrefix, \"cityId\"] : \"cityId\"}\r\n          label={t(\"city\")}\r\n        >\r\n          <Select\r\n            allowClear\r\n            showSearch\r\n            placeholder={t(\"city\")}\r\n            loading={loadingCities}\r\n            disabled={readOnly}\r\n            options={[\r\n              {\r\n                label: t(\"selcet\"),\r\n                value: \"\",\r\n              },\r\n              ...(cities?.map((x) => ({\r\n                label: x.name,\r\n                value: x.id,\r\n              })) ?? []),\r\n            ]}\r\n          />\r\n        </AntForm.Item>\r\n      </Col>\r\n      <Col xs={12} sm={8} md={6}>\r\n        <AntForm.Item\r\n          name={\r\n            namePrefix ? [namePrefix, \"ruralDistrictId\"] : \"ruralDistrictId\"\r\n          }\r\n          label={t(\"rural\")}\r\n        >\r\n          <Select\r\n            allowClear\r\n            showSearch\r\n            placeholder={t(\"rural\")}\r\n            loading={loadingRuralDistricts}\r\n            onChange={onRuralDistrictsChanged}\r\n            disabled={readOnly}\r\n            options={[\r\n              {\r\n                label: t(\"selcet\"),\r\n                value: \"\",\r\n              },\r\n              ...(ruralDistricts?.map((x) => ({\r\n                label: x.name,\r\n                value: x.id,\r\n              })) ?? []),\r\n            ]}\r\n          />\r\n        </AntForm.Item>\r\n      </Col>\r\n      <Col xs={12} sm={8} md={6}>\r\n        <AntForm.Item\r\n          name={namePrefix ? [namePrefix, \"villageId\"] : \"villageId\"}\r\n          label={t(\"village\")}\r\n        >\r\n          <Select\r\n            allowClear\r\n            showSearch\r\n            placeholder={t(\"village\")}\r\n            loading={loadingVillages}\r\n            disabled={readOnly}\r\n            options={[\r\n              {\r\n                label: t(\"selcet\"),\r\n                value: \"\",\r\n              },\r\n              ...(villages?.map((x) => ({\r\n                label: x.name,\r\n                value: x.id,\r\n              })) ?? []),\r\n            ]}\r\n          />\r\n        </AntForm.Item>\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\nexport default AddressInput;\r\n","import util from \"config/utils\";\r\n\r\nconst NumberCell = ({\r\n  value,\r\n  enabelCopy = true,\r\n}: {\r\n  value: any;\r\n  enabelCopy?: boolean;\r\n}) => {\r\n  return (\r\n    <span\r\n      onClick={enabelCopy ? () => util.copyToClipboard(value) : undefined}\r\n      title={value}\r\n    >\r\n      {util.commaThousondSeperator(\r\n        typeof value === \"string\" ? parseFloat(value) : value\r\n      )}\r\n    </span>\r\n  );\r\n};\r\nexport default NumberCell;\r\n","import { Form as AntdForm, InputNumber } from \"antd\";\r\nimport util from \"config/utils\";\r\nimport { useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface IPriceInput {\r\n  label?: string;\r\n  name?: string;\r\n  form?: any;\r\n  placeholder?: string;\r\n  min?: number;\r\n  max?: number;\r\n  className?: string;\r\n  notRequired?: boolean;\r\n  unit?: string;\r\n  readOnly?: boolean;\r\n  stringMode?:boolean\r\n}\r\nconst PriceInput = (props: IPriceInput) => {\r\n  const { t } = useTranslation();\r\n  const Form = props.form || AntdForm;\r\n  const rules = useMemo(() => {\r\n    const result: any[] = [];\r\n    if (!props.notRequired)\r\n      result.push({ required: true, message: t(\"required\") ?? \"\" });\r\n    if (typeof props.min !== \"undefined\")\r\n      result.push({\r\n        validator: (rule: any, value: string, callback: any) => {\r\n          if (!value) {\r\n            return Promise.resolve(); // Skip validation if value is empty\r\n          }\r\n          if (parseFloat(value) < props.min!) {\r\n            return Promise.reject(\r\n              new Error(\r\n                t(\"minAmountIsX\", {\r\n                  amount: util.commaThousondSeperator(props.min),\r\n                }) ?? \"\"\r\n              )\r\n            );\r\n          }\r\n          return Promise.resolve();\r\n        },\r\n      });\r\n    if (typeof props.max !== \"undefined\")\r\n      result.push({\r\n        validator: (rule: any, value: string, callback: any) => {\r\n          if (!value) {\r\n            return Promise.resolve(); // Skip validation if value is empty\r\n          }\r\n          if (parseFloat(value) > props.max!) {\r\n            return Promise.reject(\r\n              new Error(\r\n                t(\"maxAmountIsX\", {\r\n                  amount: util.commaThousondSeperator(props.max),\r\n                }) ?? \"\"\r\n              )\r\n            );\r\n          }\r\n          return Promise.resolve();\r\n        },\r\n      });\r\n    return result;\r\n  }, [props.notRequired, props.min, props.max]);\r\n  return (\r\n    <Form.Item\r\n      name={props.name || \"amount\"}\r\n      label={props.label || t(\"amount\")}\r\n      rules={rules}\r\n    >\r\n      <InputNumber\r\n        readOnly={props.readOnly}\r\n        stringMode={props.stringMode}\r\n        formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n        parser={(value) => parseFloat(value!.replace(/\\$\\s?|(,*)/g, \"\"))}\r\n        placeholder={props.placeholder}\r\n        className={`ltr-elm placeholder-r w-100 ${props.className}`}\r\n        controls={false}\r\n        style={{ paddingRight: 11 }}\r\n        prefix={t(\"baseCurrency\") ?? props.unit}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\nexport default PriceInput;\r\n","import { Form as AntForm, Checkbox, Col, Input, Row, Select } from \"antd\";\r\nimport PriceInput from \"components/shared/PriceInput\";\r\nimport addreses from \"config/api/addresses\";\r\nimport patterns from \"config/patterns\";\r\nimport useApi from \"hooks/useApi\";\r\nimport { TOrganizationLevelSummary } from \"models/organizationLevel\";\r\nimport { TRole } from \"models/user\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AddressInput from \"../shared/AddressInputs\";\r\ninterface IEntryForm {\r\n  data: any;\r\n  form: any;\r\n}\r\nconst EntryForm = ({ data, form: entryFrm }: IEntryForm) => {\r\n  const { t } = useTranslation();\r\n  const [, gettingRoles, roles] = useApi<TRole[]>({\r\n    autoCallUrl: addreses.userManager.roles,\r\n    cachingLifeTimeInSeconds: 60,\r\n  });\r\n  const [, gettingLevels, levels] = useApi<TOrganizationLevelSummary, any[]>({\r\n    autoCallUrl: addreses.organizationLevel.list,\r\n    cachingLifeTimeInSeconds: 60,\r\n    mapper: (data) => {\r\n      const result: any[] = [];\r\n      const iterator = (item: TOrganizationLevelSummary) => {\r\n        if (item.nodes && item.nodes.length) {\r\n          item.nodes.forEach((i) =>\r\n            iterator({\r\n              ...i,\r\n              name: `${item.name}/${i.name}`,\r\n            })\r\n          );\r\n        } else {\r\n          result.push(item);\r\n        }\r\n      };\r\n      if (data) iterator(data);\r\n      return result;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <AntForm.Item noStyle name=\"id\">\r\n        <Input type=\"hidden\" />\r\n      </AntForm.Item>\r\n      <Row gutter={16}>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"firstName\"\r\n            label={t(\"firstName\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder={t(\"firstName\") ?? \"\"} />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"lastName\"\r\n            label={t(\"lastName\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder={t(\"lastName\") ?? \"\"} />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"nationalCode\"\r\n            label={t(\"nationalCode\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n              {\r\n                pattern: patterns.nationalCode,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              readOnly={!!data}\r\n              placeholder={t(\"nationalCode\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item valuePropName=\"checked\" name=\"isEnabled\" label={\" \"}>\r\n            <Checkbox>{t(\"isEnabled\")}</Checkbox>\r\n          </AntForm.Item>\r\n        </Col>\r\n        {!data && (\r\n          <>\r\n            <Col xs={12} sm={8} md={6}>\r\n              <AntForm.Item\r\n                name=\"password\"\r\n                label={t(\"password\")}\r\n                rules={[\r\n                  { required: true, message: t(\"required\") ?? \"\" },\r\n                  { min: 8, message: t(\"atleastXChar\", { x: 8 }) ?? \"\" },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  placeholder={t(\"password\") ?? \"\"}\r\n                  className=\"ltr-elm placeholder-r\"\r\n                />\r\n              </AntForm.Item>\r\n            </Col>\r\n            <Col xs={12} sm={8} md={6}>\r\n              <AntForm.Item\r\n                name=\"passwordConfirm\"\r\n                label={t(\"confirmPassword\")}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: t(\"required\") ?? \"\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\r\n                        new Error(t(\"passwordsMissMatch\") ?? \"\")\r\n                      );\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  placeholder={t(\"confirmPassword\") ?? \"\"}\r\n                  className=\"ltr-elm  placeholder-r\"\r\n                />\r\n              </AntForm.Item>\r\n            </Col>\r\n          </>\r\n        )}\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"personnelId\"\r\n            label={t(\"personnelId\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n              {\r\n                pattern: patterns.personelId,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              placeholder={t(\"personnelId\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"phoneNumber\"\r\n            label={t(\"mobileNumber\")}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: t(\"required\") ?? \"\",\r\n              },\r\n              {\r\n                pattern: patterns.mobile,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              placeholder={t(\"mobileNumber\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <PriceInput\r\n            stringMode={false}\r\n            name=\"baseSalary\"\r\n            label={t(\"baseSalary\") ?? \"\"}\r\n            placeholder={t(\"baseSalary\") ?? \"\"}\r\n          />\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"emailAddress\"\r\n            label={t(\"email\")}\r\n            rules={[\r\n              {\r\n                pattern: patterns.email,\r\n                message: t(\"wrongFormat\") ?? \"\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              placeholder={t(\"email\") ?? \"\"}\r\n              className=\"ltr-elm placeholder-r\"\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={24} sm={8} md={6}>\r\n          <AntForm.Item\r\n            name=\"organizationLevelId\"\r\n            label={t(\"organizationLevel\")}\r\n          >\r\n            <Select\r\n              allowClear\r\n              placeholder={t(\"organizationLevel\")}\r\n              options={(levels as any[])?.map((l) => ({\r\n                label: l.name,\r\n                value: l.id,\r\n              }))}\r\n              loading={gettingLevels}\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <Col xs={12} sm={8} md={6}>\r\n          <AntForm.Item name=\"roleIds\" label={t(\"roles\")}>\r\n            <Select\r\n              mode=\"multiple\"\r\n              loading={gettingRoles}\r\n              //size={\"large\"}\r\n              placeholder={t(\"roles\")}\r\n              defaultValue={[]}\r\n              showArrow\r\n              //onChange={handleChange}\r\n              style={{ width: \"100%\" }}\r\n              options={roles?.map((r) => ({\r\n                label: r.name,\r\n                value: r.id,\r\n              }))}\r\n            />\r\n          </AntForm.Item>\r\n        </Col>\r\n        <AddressInput data={data} entryFrm={entryFrm} />\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default EntryForm;\r\n","import { Button, Col, Form, Input, Row } from \"antd\";\r\nimport AdminPage from \"components/panel/shared/AdminPage\";\r\nimport ConfirmModal from \"components/panel/shared/ConfirmModal\";\r\nimport CustomIcon from \"components/shared/CustomIcon\";\r\nimport addreses from \"config/api/addresses\";\r\nimport useApi from \"hooks/useApi\";\r\nimport { PagedData, PagedListUpdater } from \"models\";\r\nimport { TUserSummary } from \"models/user\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport NumberCell from \"../shared/cells/NumberCell\";\r\nimport EntryForm from \"./EntryForm\";\r\n\r\nconst User = () => {\r\n  const { t } = useTranslation();\r\n  const [userToChange, selectUser] = useState<{\r\n    user: TUserSummary;\r\n    updater: PagedListUpdater<TUserSummary>;\r\n  } | null>(null);\r\n  const [changeStatus, changing] = useApi({\r\n    onSuccess: (_, params) => {\r\n      userToChange?.updater(\r\n        (s) =>\r\n          ({\r\n            ...s,\r\n            results: [\r\n              ...(s?.results.map((x) =>\r\n                x.id !== userToChange.user.id\r\n                  ? x\r\n                  : {\r\n                      ...x,\r\n                      isEnabled: !userToChange.user.isEnabled,\r\n                    }\r\n              ) ?? []),\r\n            ],\r\n          } as PagedData<TUserSummary>)\r\n      );\r\n      selectUser(null);\r\n    },\r\n  });\r\n  const handleChangeStatus = () => {\r\n    changeStatus.post(\r\n      addreses.userManager.changeStatus(\r\n        userToChange!.user.id,\r\n        !userToChange!.user.isEnabled\r\n      )\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <AdminPage<TUserSummary>\r\n        title={t(\"usersManagement\")}\r\n        id=\"user\"\r\n        idProp=\"id\"\r\n        EntryForm={EntryForm}\r\n        filterUrl={addreses.userManager.list}\r\n        findUrl={(record) => addreses.userManager.find(record.id)}\r\n        columns={[\r\n          {\r\n            title: t(\"fullName\"),\r\n            dataIndex: \"fullName\",\r\n            key: \"fullName\",\r\n            fixed: \"left\",\r\n            render: function (text, record, index) {\r\n              return <span>{`${record.firstName} ${record.lastName}`}</span>;\r\n            },\r\n          },\r\n          {\r\n            title: t(\"nationalCode\"),\r\n            dataIndex: \"nationalCode\",\r\n            key: \"nationalCode\",\r\n          },\r\n          {\r\n            title: t(\"email\"),\r\n            dataIndex: \"emailAddress\",\r\n            key: \"emailAddress\",\r\n            width: 220,\r\n            render: function (text, record, index) {\r\n              return <a href={`mailto:${text}`}>{text}</a>;\r\n            },\r\n          },\r\n          {\r\n            title: t(\"baseSalary\"),\r\n            dataIndex: \"baseSalary\",\r\n            key: \"baseSalary\",\r\n            render: (text) => <NumberCell value={text} />,\r\n          },\r\n          {\r\n            title: t(\"organizationLevel\"),\r\n            dataIndex: \"organizationLevelName\",\r\n            key: \"organizationLevelName\",\r\n            width:200,\r\n            render: (text) => <span>{text}</span>,\r\n          }\r\n        ]}\r\n        scrollX={1000}\r\n        deleteAction={{\r\n          url: (record) => addreses.userManager.delete(record.id),\r\n        }}\r\n        addUrl={addreses.userManager.add}\r\n        editAction={{\r\n          url: addreses.userManager.update,\r\n        }}\r\n        customActions={[\r\n          {\r\n            renderer: (text, record, updater) => {\r\n              return (\r\n                <Button\r\n                  className={record.isEnabled ? \"btn-warn\" : \"btn-success\"}\r\n                  danger={record.isEnabled}\r\n                  type=\"primary\"\r\n                  shape=\"circle\"\r\n                  title={\r\n                    (record.isEnabled\r\n                      ? t(\"deactiveUserAccount\")\r\n                      : t(\"activateUserAccount\")) ?? \"\"\r\n                  }\r\n                  icon={\r\n                    <CustomIcon\r\n                      name={\r\n                        !record.isEnabled\r\n                          ? \"IoShieldCheckmarkOutline\"\r\n                          : \"IoLockClosedOutline\"\r\n                      }\r\n                    />\r\n                  }\r\n                  onClick={() =>\r\n                    selectUser({\r\n                      user: record,\r\n                      updater,\r\n                    })\r\n                  }\r\n                />\r\n              );\r\n            },\r\n          },\r\n        ]}\r\n        entryModalWidth={1000}\r\n      >\r\n        <Row gutter={[20, 20]}>\r\n          <Col xs={24} sm={12}>\r\n            <Form.Item name=\"filter\" rules={[]}>\r\n              <Input placeholder={t(\"search\") ?? \"\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n      </AdminPage>\r\n      <ConfirmModal\r\n        open={!!userToChange}\r\n        loading={changing}\r\n        onOk={handleChangeStatus}\r\n        title={t(\"userAccount\") ?? \"\"}\r\n        message={\r\n          (userToChange?.user.isEnabled\r\n            ? t(\"deactiveUserAccount\")\r\n            : t(\"activateUserAccount\")) ?? \"\"\r\n        }\r\n        onCancel={() => selectUser(null)}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default User;\r\n","const patterns = {\r\n  nationalCode: /\\d{10}/,\r\n  personelId: /\\d{4}/,\r\n  email: /\\S+@\\S+\\.\\S+/,\r\n  mobile: /09[0-9]{2}(-| )?[0-9]{3}(-| )?[0-9]{4}/,\r\n  phone: /0\\d{10}/,\r\n  ip: /(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/,\r\n  postalCode:/\\d{10}/,\r\n  url: /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)/,\r\n};\r\nexport default patterns;\r\n","import { FormInstance } from \"antd\";\r\nimport addreses from \"config/api/addresses\";\r\nimport useApi from \"hooks/useApi\";\r\nimport { TLocation } from \"models\";\r\nimport { TSourceLocation } from \"models/waterPermit\";\r\ninterface IUseLocation {\r\n  entryFrm: FormInstance;\r\n  location?: TSourceLocation | null;\r\n  namePrefix?: string;\r\n}\r\nconst useLocation = ({ location, entryFrm, namePrefix }: IUseLocation) => {\r\n  const [getCounties, loadingCounties, counties] = useApi<TLocation[]>({\r\n    autoCallUrl: addreses.locations.counties,\r\n    cachingLifeTimeInSeconds: 60,\r\n  });\r\n  const [getDistricts, loadingDistricts, districts] = useApi<TLocation[]>({\r\n    cachingLifeTimeInSeconds: 60,\r\n    autoCallUrl: location?.countyId\r\n      ? addreses.locations.districs(location?.countyId.toString())\r\n      : undefined,\r\n  });\r\n  const [getCities, loadingCities, cities] = useApi<TLocation[]>({\r\n    cachingLifeTimeInSeconds: 60,\r\n    autoCallUrl: location?.districtId\r\n      ? addreses.locations.cities(location?.districtId.toString())\r\n      : undefined,\r\n  });\r\n  const [getRuralDistricts, loadingRuralDistricts, ruralDistricts] = useApi<\r\n    TLocation[]\r\n  >({\r\n    cachingLifeTimeInSeconds: 60,\r\n    autoCallUrl: location?.districtId\r\n      ? addreses.locations.ruralDistricts(location?.districtId.toString())\r\n      : undefined,\r\n  });\r\n  const [getVillages, loadingVillages, villages] = useApi<TLocation[]>({\r\n    cachingLifeTimeInSeconds: 60,\r\n    autoCallUrl: location?.ruralDistrictId\r\n      ? addreses.locations.villages(location?.ruralDistrictId.toString())\r\n      : undefined,\r\n  });\r\n  const onCountyChanged = (value: any) => {\r\n    entryFrm.resetFields([\r\n      namePrefix ? [namePrefix, \"districtId\"] : \"districtId\",\r\n      namePrefix ? [namePrefix, \"cityId\"] : \"cityId\",\r\n      namePrefix ? [namePrefix, \"ruralDistrictId\"] : \"ruralDistrictId\",\r\n      namePrefix ? [namePrefix, \"villageId\"] : \"villageId\",\r\n    ]);\r\n    const test = entryFrm.getFieldInstance(namePrefix ? [namePrefix, \"districtId\"] : \"districtId\");\r\n    entryFrm.setFieldValue(\r\n      namePrefix ? [namePrefix, \"districtId\"] : \"districtId\",\r\n      \"\"\r\n    );\r\n    entryFrm.setFieldValue(namePrefix ? [namePrefix, \"cityId\"] : \"cityId\", \"\");\r\n    entryFrm.setFieldValue(\r\n      namePrefix ? [namePrefix, \"ruralDistrictId\"] : \"ruralDistrictId\",\r\n      \"\"\r\n    );\r\n    entryFrm.setFieldValue(\r\n      namePrefix ? [namePrefix, \"villageId\"] : \"villageId\",\r\n      \"\"\r\n    );\r\n    if (value !== \"\") {\r\n      getDistricts.get(addreses.locations.districs(value));\r\n    }\r\n  };\r\n  const onDistrictChanged = (value: any) => {\r\n    entryFrm.resetFields([\r\n      namePrefix ? [namePrefix, \"cityId\"] : \"cityId\",\r\n      namePrefix ? [namePrefix, \"ruralDistrictId\"] : \"ruralDistrictId\",\r\n      namePrefix ? [namePrefix, \"villageId\"] : \"villageId\",\r\n    ]);\r\n    entryFrm.setFieldValue(namePrefix ? [namePrefix, \"cityId\"] : \"cityId\", \"\");\r\n    entryFrm.setFieldValue(\r\n      namePrefix ? [namePrefix, \"ruralDistrictId\"] : \"ruralDistrictId\",\r\n      \"\"\r\n    );\r\n    entryFrm.setFieldValue(\r\n      namePrefix ? [namePrefix, \"villageId\"] : \"villageId\",\r\n      \"\"\r\n    );\r\n    if (value !== \"\") {\r\n      getCities.get(addreses.locations.cities(value));\r\n      getRuralDistricts.get(addreses.locations.ruralDistricts(value));\r\n    }\r\n  };\r\n  const onRuralDistrictsChanged = (value: any) => {\r\n    entryFrm.resetFields([\r\n      namePrefix ? [namePrefix, \"villageId\"] : \"villageId\",\r\n    ]);\r\n    entryFrm.setFieldValue(\r\n      namePrefix ? [namePrefix, \"villageId\"] : \"villageId\",\r\n      \"\"\r\n    );\r\n    if (value !== \"\") {\r\n      getVillages.get(addreses.locations.villages(value));\r\n    }\r\n  };\r\n  return {\r\n    loadingCounties,\r\n    counties,\r\n    onCountyChanged,\r\n    loadingDistricts,\r\n    districts,\r\n    onDistrictChanged,\r\n    loadingCities,\r\n    cities,\r\n    getRuralDistricts,\r\n    loadingRuralDistricts,\r\n    ruralDistricts,\r\n    onRuralDistrictsChanged,\r\n    loadingVillages,\r\n    villages,\r\n  };\r\n};\r\nexport default useLocation;\r\n"],"names":["entryFrm","data","namePrefix","readOnly","t","useTranslation","useLocation","location","loadingCounties","counties","onCountyChanged","loadingDistricts","districts","onDistrictChanged","loadingCities","cities","loadingRuralDistricts","ruralDistricts","onRuralDistrictsChanged","loadingVillages","villages","xs","sm","md","name","label","allowClear","showSearch","placeholder","loading","onChange","disabled","options","value","map","x","id","enabelCopy","onClick","util","undefined","title","parseFloat","props","Form","form","AntdForm","rules","useMemo","result","notRequired","push","required","message","min","validator","rule","callback","Promise","reject","Error","amount","resolve","max","Item","stringMode","formatter","replace","parser","className","controls","style","paddingRight","prefix","unit","useApi","autoCallUrl","addreses","cachingLifeTimeInSeconds","gettingRoles","roles","mapper","iterator","item","nodes","length","forEach","i","gettingLevels","levels","noStyle","type","gutter","pattern","patterns","valuePropName","getFieldValue","_","l","mode","defaultValue","showArrow","width","r","useState","userToChange","selectUser","onSuccess","params","updater","s","results","user","isEnabled","changeStatus","changing","AdminPage","idProp","EntryForm","filterUrl","findUrl","record","columns","dataIndex","key","fixed","render","text","index","firstName","lastName","href","NumberCell","scrollX","deleteAction","url","addUrl","editAction","customActions","renderer","danger","shape","icon","CustomIcon","entryModalWidth","ConfirmModal","open","onOk","post","onCancel","nationalCode","personelId","email","mobile","phone","ip","postalCode","countyId","toString","getDistricts","districtId","getCities","getRuralDistricts","ruralDistrictId","getVillages","resetFields","getFieldInstance","setFieldValue","get"],"sourceRoot":""}